<?xml version="1.0"?>
<launch>

	<!-- GDB functionality -->
	<arg name="debug" default="false" />
	<arg unless="$(arg debug)" name="launch_prefix" value="" />
	<arg if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />

	<arg name="hw_or_sim" default="hw" />
	<arg name="joy_or_key" default="joy" />
	<arg name="button_box" default="true"/>
	<arg name="record" default="false" />
	<arg name="primary_imu" default="ADI" />

	<group ns="frcrobot_jetson">
		<rosparam file="$(find ros_control_boilerplate)/config/2021_compbot_base_jetson.yaml" command="load"/>
		<rosparam file="$(find ros_control_boilerplate)/config/2021_swerve_drive.yaml" command="load"/>
		<rosparam file="$(find ros_control_boilerplate)/config/2021_compbot_offsets.yaml" command="load"/>
		<rosparam file="$(find ros_control_boilerplate)/config/robot_code_ready_controller_jetson.yaml" command="load"/>
		<!--
		<rosparam file="$(find ros_control_boilerplate)/config/2020_shooter_params.yaml" command="load"/>
		This is duplicated below where the auto node is loaded : <rosparam file="$(find behaviors)/config/auto_mode_config.yaml" command="load"/>
		<rosparam file="$(find robot_visualizer)/config/robot_visualize.yaml" command="load"/>
		-->
		<rosparam file="$(find behaviors)/config/alignmentOffsets.yaml" command="load"/>


		<!--
		<node name="zero_wheel_service" pkg="talon_swerve_drive_controller" type="zero_wheel_service" output="screen"> </node>
		-->

		<node name="dump_offsets_service" pkg="talon_swerve_drive_controller" type="dump_offsets_service" output="screen"> </node>

		<!-- Load hardware interface -->
		<node name="frcrobot_$(arg hw_or_sim)_interface" pkg="ros_control_boilerplate" type="frcrobot_$(arg hw_or_sim)_main"
			output="screen" launch-prefix="$(arg launch_prefix)">
		</node>

		<!-- Load controller manager-->

		<!-- <node name="ros_control_controller_manager" pkg="controller_manager" type="controller_manager" respawn="false"
			output="screen" args="spawn indexer_controller shooter_controller climber_controller turret_controller control_panel_controller intake_controller joint_state_controller_jetson joint_state_listener_controller talon_state_controller_jetson talon_config_controller match_state_listener_controller pcm_state_controller pdp_state_controller swerve_drive_controller robot_code_ready_controller" />
 -->
		<!-- Incomplete controllers list, for testing -->
		<node name="ros_control_controller_manager" pkg="controller_manager" type="controller_manager" respawn="false"
			output="screen" args="spawn indexer_controller intake_controller joint_state_controller_jetson joint_state_listener_controller talon_state_controller_jetson talon_config_controller match_state_listener_controller pcm_state_controller pdp_state_controller swerve_drive_controller robot_code_ready_controller" />

		<node name="uptime_jetson" pkg="uptime" type="uptime_node" output="screen" />

		<include file="$(find cpu_monitor)/launch/cpu_monitor.launch">
			<arg name="poll_period" value="1"/>
		</include>
	</group>

	<group ns="imu">
		<include file="$(find controller_node)/launch/2019_compbot_jetson_imu.launch">
			<arg name="hw_or_sim" value="$(arg hw_or_sim)" />
			<arg name="primary_imu" value="$(arg primary_imu)" />
		</include>
	</group>

	<group ns="robot_state">
		<param name="robot_description" command="$(find xacro)/xacro '$(find controller_node)/urdf/2021_compbot.xacro'" />
		<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
	</group>

	<group ns="swerve_imu_ukf">
		<node pkg="tf2_ros" type="static_transform_publisher" name="base_link_to_imu" args="0 0 0 0 0 0 base_link imu" />
	<!--
		<include file="$(find controller_node)/launch/fuse_odom.launch"/>
	-->
	</group>

	<include file="$(find controller_node)/launch/teleop.launch"/>
	<include file="$(find controller_node)/launch/path_follower.launch"/>
	<include file="$(find behaviors)/launch/auto_node.launch"/>

	<node name="num_powercells_pub_node" pkg="behaviors" type="num_powercells_pub_node" output="screen" />
	<param name="initial_num_powercells" value="0"/>

	<!-- Actionlib servers !! -->
	<!-- General actionlib config -->
	<rosparam file="$(find behaviors)/config/2020_general_actionlib.yaml" command="load"/>

	<group ns="indexer">
		<rosparam file="$(find behaviors)/config/indexerServer.yaml" command="load"/>
		<node name="indexer_ac_server" pkg="behaviors" type="indexer_server" output="screen" />
	</group>
	<group ns="eject">
		<rosparam file="$(find behaviors)/config/ejectServer.yaml" command="load"/>
		<node name="eject_ac_server" pkg="behaviors" type="eject_server" output="screen" />
	</group>
	<group ns="powercell_intake">
		<rosparam file="$(find behaviors)/config/intakePowercellServer.yaml" command="load"/>
		<node name="intake_ac_server" pkg="behaviors" type="intake_powercell_server" output="screen" />
	</group>

	<!--
	<group ns="rotate_panel">
		<rosparam file="$(find behaviors)/config/rotatePanelServer.yaml" command="load"/>
        <node name="rotate_panel_server" pkg="behaviors" type="rotate_panel_server" output="screen" />
    </group>
	-->

	<group ns="cmd_vel_mux">
		<node name="twist_mux" pkg="twist_mux" type="twist_mux">
			<rosparam command="load" file="$(find talon_swerve_drive_controller)/config/twist_mux.yaml"/>
			<remap from="cmd_vel_out" to="/frcrobot_jetson/swerve_drive_controller/cmd_vel"/>
		</node>
	</group>

	<!-- vision align -->
	<!--
	<include file="$(find controller_node)/launch/tape_detection.launch">
		<arg name="camera_model" value="zed2" />
	</include>
	-->
	<include file="$(find tf_object_detection)/launch/detection.launch">
		<arg name="input_type" value="live_camera" />
	</include>

	<include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch" >
		<arg name="port" value="5803"/>
	</include>

	<!--
	<include file="$(find controller_node)/launch/tape_detection_c920.launch" />
	-->

	<!--
	<include file="$(find controller_node)/launch/rs_t265.launch" >
		<arg name="camera" value="rs_t265" />
	</include>
	-->

	<!--
	<group ns="shooter">
		<rosparam file="$(find behaviors)/config/shooter_actionlib.yaml" command="load"/>
		<node name="shooter_ac_server" pkg="behaviors" type="shooter_actionlib_server" output="screen" />
	</group>
	<group ns="align_to_shoot">
		<rosparam file="$(find behaviors)/config/align_to_shoot_actionlib.yaml" command="load"/>
		<node name="align_to_shoot_server" pkg="behaviors" type="align_to_shoot_server" output="screen" />
	</group>
	-->

	<include file="$(find controller_node)/launch/record_2020_compbot.launch" if="$(arg record)" />
	<!--
	<include file="$(find controller_node)/launch/record_2020_no_zed.launch" if="$(arg record)" />

	-->
	<rosparam file="$(find pf_localization)/config/skills_challenge_params.yaml" command="load"/>
	<include file="$(find controller_node)/launch/pf_localization.launch"/>

</launch>
