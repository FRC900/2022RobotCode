# ros_control_boilerplate Settings -----------------------
# Settings for ros_control control loop
generic_hw_control_loop:
  loop_hz: 100
  cycle_time_error_threshold: 0.01
  #some processes have lower frequencies than the main control loop
  robot_iteration_hz: 20
  joystick_read_hz: 50
  match_data_read_hz: 2
  robot_controller_read_hz: 20

# Settings for ros_control hardware interface
# Map a name for each valid joint to a CAN id
# For future expansion, change hw_id to specify one
# of several types of HW interface : CAN_id, PWM_id, DIO_id, AIO_id, etc.
hardware_interface:
   joints:
       # Need a single CTRE hardware device defined so the Rio 
       # broadcasts keepalive / enable signals.  Without this, talons
       # controlled by the Jetson won't run. Use an unused CAN Id so that
       # the Rio sending 0'd control frames to it won't interfere with
       # operation of real Talons
       - {name: dummy_talon, type: can_talon_srx, local: false}

       - {name: spark_max_1, type: can_spark_max, local: true, can_id: 1, motor_type: brushless}

       - {name: joystick0, type: joystick, id: 0, local: true}
       - {name: joystick_rumble0, type: rumble, rumble_port: 0}
       - {name: button_box, type: button_box, id: 1, local: true}
       - {name: joystick2, type: joystick, id: 2, local: true}
       - {name: joystick_rumble2, type: rumble, rumble_port: 2}
       - {name: robot_code_ready_rio, local: true, type: ready}
         
# Create controllers for each joint
#
# Entry is the name of the controller. It can be anything.  
# It will create a namespace with that name under the main
# controller namespace. Subscribed topics for that controller
# will be most often show up under 
# <top level controller manager ns>/<controller ns>/topic
# e.g.
# /frcrobot/joint1_talon_controller/command
# /frcrobot/joint2_talon_controller/command
# /frcrobot/talon_states
#

# Similar to above, but this one prints non-Talon state
# (stuff that fits into the more standard ROS position/
# speed/effort paradigm)
joint_state_controller_rio:
   type:         joint_state_controller/JointStateController
   publish_rate: 100

# Used to listen for joint state published from the given topic
# (in this case the Jetson) and copy them to internal copies of 
# joint data
joint_state_listener_controller:
    type:      state_listener_controller/JointStateListenerController
    topic:     /frcrobot_jetson/joint_states

match_state_controller:
   type:         match_state_controller/MatchStateController
   publish_rate: 20

robot_controller_state_controller:
   type: robot_controller_state_controller/RobotControllerStateController
   publish_rate: 100

green_led_controller:
    type: position_controllers/JointPositionController
    joint: green_led

# Controllers needed to publish spark max config and current state
spark_max_state_controller:
    type: spark_max_state_controller/SparkMaxStateController
    publish_rate: 100

spark_max_config_controller:
    type: spark_max_config_controller/SparkMaxConfigController
    publish_rate: 10


# Controllers to actually drive a motor
# type is one of the named types in src/spark_max_controllers/spark_max_controllers_plugin.xml
# joint picks one of the joints configured in the hardware_interface.joints list at the top of the file
spark_max_duty_cyle_controller:
    type: spark_max_controllers/SparkMaxDutyCycleController
    joint: spark_max_1

