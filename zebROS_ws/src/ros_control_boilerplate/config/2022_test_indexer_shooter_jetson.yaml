# ros_control_boilerplate Settings -----------------------
# Settings for ros_control control loop
generic_hw_control_loop:
  loop_hz: 100
  cycle_time_error_threshold: 0.01
  canifier_read_hz: 100
  cancoder_read_hz: 100
  #some processes have lower frequencies than the main control loop
  ctre_mc_read_hz: 100
  pcm_read_hz: 20
  pdh_read_hz: 20
  pdp_read_hz: 20
  ph_read_hz: 20
  robot_iteration_hz: 20
  spark_max_read_hz: 100
  joystick_read_hz: 50
  match_data_read_hz: 2
  robot_controller_read_hz: 20
  as726x_read_hz: 7


# Settings for ros_control hardware interface
# Map a name for each valid joint to a CAN id
# For future expansion, change hw_id to specify one
# of several types of HW interface : CAN_id, PWM_id, DIO_id, AIO_id, etc.
hardware_interface:
   # Identify this as a non-Rio controller using Linux
   # socketCan device can0 to communicate
   run_hal_robot: false
   can_interface: can0

   joints:
       - {name: shooter_leader, type: can_talon_fx, can_id: 40, local: true} # TODO Fix CAN id
       - {name: shooter_follower, type: can_talon_fx, can_id: 41, local: true} # TODO Fix CAN id
       - {name: indexer_straight, type: can_talon_fx, can_id: 50, local: true} # TODO Fix CAN id
       - {name: indexer_arc, type: can_talon_fx, can_id: 51, local: true} # TODO Fix CAN id

       - {name: intake_motor, type: can_talon_fx, can_id: 60, local: true} # TODO Fix CAN id
       - {name: intake_solenoid_joint, type: solenoid, local_hardware: false, local_update: true}

       - {name: climber_dynamic_arm_solenoid_joint, type: double_solenoid, local_hardware: false, local_update: true}
       - {name: climber_static_hook_solenoid_joint, type: double_solenoid, local_hardware: false, local_update: true}
       - {name: climber_dynamic1_limit_switch, type: digital_input, local: false}
       - {name: climber_dynamic2_limit_switch, type: digital_input, local: false}
       - {name: climber_static1_limit_switch, type: digital_input, local: false}
       - {name: climber_static2_limit_switch, type: digital_input, local: false}
       - {name: climber_dynamic_arm_leader, type: can_talon_fx, can_id: 30, local: true} # TODO FIX CAN ID
       - {name: climber_dynamic_arm_follower, type: can_talon_fx, can_id: 31, local: true} # TODO FIX CAN ID
       - {name: joystick0, type: joystick, id: 0, local: true}

       - {name: robot_code_ready_jetson, local: true, type: ready}
       - {name: robot_code_ready_rio, local: false, type: ready} # Probably not really needed?

# Create controllers for each joint
#
# Entry is the name of the controller. It can be anything.
# It will create a namespace with that name under the main
# controller namespace. Subscribed topics for that controller
# will be most often show up under
# <top level controller manager ns>/<controller ns>/topic
# e.g.
# /frcrobot/joint1_talon_controller/command
# /frcrobot/joint2_talon_controller/command
# /frcrobot/talon_states

#Set up controllers for main robot mechanisms
shooter_controller:
  joint: shooter_leader
  type: talon_controllers/TalonVelocityCloseLoopController
  feedback_type: IntegratedSensor
  # TODO FIX ALL BELOW VALUES (these are from 2020)
  close_loop_values:
      - {p: 0.00, i: 0.000, d: 0.0, f: 0, i_zone: 0}
  invert_output: true
  sensor_phase: false
  peak_output_forward: 1.0
  peak_output_reverse: -1.0
  nominal_output_forward: 0.0
  nominal_output_reverse: 0.0
  voltage_compensation_enable: true
  dynamic_reconfigure: True
  neutral_mode: Coast

#Set up controllers for main robot mechanisms
shooter_percent_out_controller:
  joint: shooter_leader
  type: talon_controllers/TalonPercentOutputController
  invert_output: true
  voltage_compensation_enable: true
  dynamic_reconfigure: True
  neutral_mode: Coast
  #status_1_general_period: 10
  #status_2_feedback0_period: 20
  status_3_quadrature_period: 250
  #status_4_aintempvbat_period: 160
  #status_6_misc_period: 0
  #status_7_commstatus_period: 0
  status_8_pulsewidth_period: 250
  status_9_motprofbuffer_period: 250
  status_10_motionmagic_period: 250
  #status_11_uartgadgeteer_period: 250
  #status_12_feedback1_period: 250
  #status_13_base_pidf0_period: 160
  #status_14_turn_pidf1_period: 250
  status_15_firmwareapistatus_period: 250
  #status_17_brushless_current_period: 50
  
shooter_follower_controller:
    type: talon_controllers/TalonFollowerController
    joint: shooter_follower
    invert_output: false
    follow_joint: shooter_leader
    voltage_compensation_enable: true
    dynamic_reconfigure: False
    status_1_general_period: 250
    status_2_feedback0_period: 250
    status_3_quadrature_period: 250
    #status_4_aintempvbat_period: 160
    #status_6_misc_period: 0
    #status_7_commstatus_period: 0
    status_8_pulsewidth_period: 250
    status_9_motprofbuffer_period: 250
    status_10_motionmagic_period: 250
    #status_11_uartgadgeteer_period: 250
    #status_12_feedback1_period: 250
    #status_13_base_pidf0_period: 160
    #status_14_turn_pidf1_period: 250
    status_15_firmwareapistatus_period: 250
    #status_17_brushless_current_period: 50

indexer_straight_controller:
    type: talon_controllers/TalonPercentOutputController
    joint: indexer_straight
    invert_output: false
    voltage_compensation_enable: true
    #status_1_general_period: 10
    #status_2_feedback0_period: 20
    status_3_quadrature_period: 250
    #status_4_aintempvbat_period: 160
    #status_6_misc_period: 0
    #status_7_commstatus_period: 0
    status_8_pulsewidth_period: 250
    status_9_motprofbuffer_period: 250
    status_10_motionmagic_period: 250
    #status_11_uartgadgeteer_period: 250
    #status_12_feedback1_period: 250
    #status_13_base_pidf0_period: 160
    #status_14_turn_pidf1_period: 250
    status_15_firmwareapistatus_period: 250
    #status_17_brushless_current_period: 50
    
indexer_arc_controller:
    type: talon_controllers/TalonPercentOutputController
    joint: indexer_arc
    invert_output: false
    voltage_compensation_enable: true
    #status_1_general_period: 10
    #status_2_feedback0_period: 20
    status_3_quadrature_period: 250
    #status_4_aintempvbat_period: 160
    #status_6_misc_period: 0
    #status_7_commstatus_period: 0
    status_8_pulsewidth_period: 250
    status_9_motprofbuffer_period: 250
    status_10_motionmagic_period: 250
    #status_11_uartgadgeteer_period: 250
    #status_12_feedback1_period: 250
    #status_13_base_pidf0_period: 160
    #status_14_turn_pidf1_period: 250
    status_15_firmwareapistatus_period: 250
    #status_17_brushless_current_period: 50

intake_motor_controller:
    type: talon_controllers/TalonPercentOutputController
    joint: intake_motor
    invert_output: false
    voltage_compensation_enable: true
    #status_1_general_period: 10
    #status_2_feedback0_period: 20
    status_3_quadrature_period: 250
    #status_4_aintempvbat_period: 160
    #status_6_misc_period: 0
    #status_7_commstatus_period: 0
    status_8_pulsewidth_period: 250
    status_9_motprofbuffer_period: 250
    status_10_motionmagic_period: 250
    #status_11_uartgadgeteer_period: 250
    #status_12_feedback1_period: 250
    #status_13_base_pidf0_period: 160
    #status_14_turn_pidf1_period: 250
    status_15_firmwareapistatus_period: 250
    #status_17_brushless_current_period: 50

dynamic_arm_solenoid_controller:
    type: position_controllers/JointPositionController
    joint: climber_dynamic_arm_solenoid_joint

static_hook_solenoid_controller:
    type: position_controllers/JointPositionController
    joint: climber_static_hook_solenoid_joint

climber_percent_out_controller:
    joint: climber_dynamic_arm_leader
    type: talon_controllers/TalonPercentOutputController
    invert_output: true
    voltage_compensation_enable: true
    dynamic_reconfigure: True
    neutral_mode: Brake
    #status_1_general_period: 10
    #status_2_feedback0_period: 20
    status_3_quadrature_period: 250
    #status_4_aintempvbat_period: 160
    #status_6_misc_period: 0
    #status_7_commstatus_period: 0
    status_8_pulsewidth_period: 250
    status_9_motprofbuffer_period: 250
    status_10_motionmagic_period: 250
    #status_11_uartgadgeteer_period: 250
    #status_12_feedback1_period: 250
    #status_13_base_pidf0_period: 160
    #status_14_turn_pidf1_period: 250
    status_15_firmwareapistatus_period: 250
    #status_17_brushless_current_period: 50
  
climber_follower_controller:
    type: talon_controllers/TalonFollowerController
    joint: climber_dynamic_arm_follower
    invert_output: false
    follow_joint: climber_dynamic_arm_leader
    neutral_mode: Brake
    voltage_compensation_enable: true
    dynamic_reconfigure: False
    status_1_general_period: 250
    status_2_feedback0_period: 250
    status_3_quadrature_period: 250
    #status_4_aintempvbat_period: 160
    #status_6_misc_period: 0
    #status_7_commstatus_period: 0
    status_8_pulsewidth_period: 250
    status_9_motprofbuffer_period: 250
    status_10_motionmagic_period: 250
    #status_11_uartgadgeteer_period: 250
    #status_12_feedback1_period: 250
    #status_13_base_pidf0_period: 160
    #status_14_turn_pidf1_period: 250
    status_15_firmwareapistatus_period: 250
    #status_17_brushless_current_period: 50

intake_solenoid_controller:
  type: position_controllers/JointPositionController
  joint: intake_solenoid_joint

# This one creates the /talon_states topic necessary in ROS
# It doesn't actually control anything, just takes the internal
# encoder state used by the hw manager and publishes it as
# a ROS topic.  This is generic ROS stuff, so we'll have
# to figure out what to map e.g. effort to in the Talon world
talon_state_controller_jetson:
   type:         talon_state_controller/TalonStateController
   publish_rate: 100
talon_config_controller:
   type:         talon_config_controller/TalonConfigController
   publish_rate: 5

# Similar to above, but this one prints non-Talon state
# (stuff that fits into the more standard ROS position/
# speed/effort paradigm)
joint_state_controller_jetson:
   type:         joint_state_controller/JointStateController
   publish_rate: 100

# Used to listen for remote joint states published from the given topic
# (in this case the Rio) and copy them to internal copies of
# joint data
joint_state_listener_controller:
    type:      state_listener_controller/JointStateListenerController
    topic:     /frcrobot_rio/joint_states

match_state_listener_controller:
    type:      state_listener_controller/MatchStateListenerController
    topic:     /frcrobot_rio/match_data

# These controllers are defined for testing indivudal motors
# but are not actually used for normal swerve drive control
# TODO Sensor phase default for angle motors is good

