# ros_control_boilerplate Settings -----------------------
# Settings for ros_control control loop
generic_hw_control_loop:
  loop_hz: 100
  cycle_time_error_threshold: 0.01
  canifier_read_hz: 100
  cancoder_read_hz: 100
  #some processes have lower frequencies than the main control loop
  ctre_mc_read_hz: 100
  pcm_read_hz: 20
  pdh_read_hz: 20
  pdp_read_hz: 20
  ph_read_hz: 20
  robot_iteration_hz: 20
  spark_max_read_hz: 100
  joystick_read_hz: 50
  match_data_read_hz: 2
  robot_controller_read_hz: 20
  as726x_read_hz: 7

# Settings for ros_control hardware interface
# Map a name for each valid joint to a CAN id
# For future expansion, change hw_id to specify one
# of several types of HW interface : CAN_id, PWM_id, DIO_id, AIO_id, etc.
hardware_interface:
   joints:
       # Need a single CTRE hardware device defined so the Rio
       # broadcasts keepalive / enable signals.  Without this, talons
       # controlled by the Jetson won't run. Use an unused CAN Id so that
       # the Rio sending 0'd control frames to it won't interfere with
       # operation of real Talons
       - {name: dummy_talon, type: can_talon_srx, local: false}

       - {name: s0101, type: solenoid, module_type: revph, module_id: 1, channel: 1, local_hardware: true, local_update: true}
       - {name: pdh, type: pdh, module: 1}
       - {name: ph, type: ph, ph_id: 1}
       - {name: robot_code_ready_rio, local: true, type: ready}

# Create controllers for each joint
#
# Entry is the name of the controller. It can be anything.
# It will create a namespace with that name under the main
# controller namespace. Subscribed topics for that controller
# will be most often show up under
# <top level controller manager ns>/<controller ns>/topic
# e.g.
# /frcrobot/joint1_talon_controller/command
# /frcrobot/joint2_talon_controller/command
# /frcrobot/talon_states
#
#
# Similar to above, but this one prints non-Talon state
# (stuff that fits into the more standard ROS position/
# speed/effort paradigm)
joint_state_controller_rio:
   type:         joint_state_controller/JointStateController
   publish_rate: 100

match_state_controller:
   type:         match_state_controller/MatchStateController
   publish_rate: 20

pcm_state_controller:
   type : pcm_state_controller/PCMStateController
   publish_rate: 20

robot_controller_state_controller:
   type: robot_controller_state_controller/RobotControllerStateController
   publish_rate: 20

ph_state_controller:
    type: ph_state_controller/PHStateController
    publish_rate: 20

pdh_state_controller:
    type: pdh_state_controller/PDHStateController
    publish_rate: 20

pdh_controller:
    type: pdh_controller/PDHStateController
    publish_rate: 20

solenoid_controller:
    type: position_controllers/JointPositionController
    joint: s0101
