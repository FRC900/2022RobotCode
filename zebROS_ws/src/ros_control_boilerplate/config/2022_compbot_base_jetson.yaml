# ros_control_boilerplate Settings -----------------------
# Settings for ros_control control loop
generic_hw_control_loop:
  loop_hz: 100
  cycle_time_error_threshold: 0.01
  canifier_read_hz: 100
  cancoder_read_hz: 100
  #some processes have lower frequencies than the main control loop
  ctre_mc_read_hz: 100
  pcm_read_hz: 20
  pdh_read_hz: 20
  pdp_read_hz: 20
  ph_read_hz: 20
  robot_iteration_hz: 20
  spark_max_read_hz: 100
  joystick_read_hz: 50
  match_data_read_hz: 2
  robot_controller_read_hz: 20
  as726x_read_hz: 7


# Settings for ros_control hardware interface
# Map a name for each valid joint to a CAN id
# For future expansion, change hw_id to specify one
# of several types of HW interface : CAN_id, PWM_id, DIO_id, AIO_id, etc.
hardware_interface:
   # Identify this as a non-Rio controller using Linux
   # socketCan device can0 to communicate
   run_hal_robot: false
   can_interface: can0

   joints:
       #TODO: Get config values of joints
       #- {name: turret_joint, type: can_talon_srx, can_id: 30, local: true}

         #- {name: shooter_joint, type: can_talon_srx, can_id: 32, local: true}
         #- {name: shooter_hood_joint, type: solenoid, local_hardware: false, local_update: true}

         #- {name: climber_winch_joint, type: can_talon_srx, can_id: 40, local: true} #TODO fix can id
         #- {name: climber_deploy_joint, type: double_solenoid, local_hardware: false, local_update: true}
         #- {name: climber_elevator_brake_joint, type: solenoid, local_hardware: false, local_update: true}

         # - {name: control_panel_joint, type: can_talon_srx, can_id: 34, local: true}

       - {name: climber_dynamic_arm_solenoid_joint, type: double_solenoid, module_type: ctrepcm, local_hardware: false, local_update: true}
       - {name: climber_static_hook_solenoid_joint, type: double_solenoid, module_type: ctrepcm, local_hardware: false, local_update: true}
       - {name: climber_dynamic1_limit_switch, type: digital_input, local: false}
       - {name: climber_dynamic2_limit_switch, type: digital_input, local: false}
       - {name: climber_static1_limit_switch, type: digital_input, local: false}
       - {name: climber_static2_limit_switch, type: digital_input, local: false}
       - {name: climber_dynamic_arm_leader, type: can_talon_fx, can_id: 30, local: true} # TODO FIX CAN ID
       - {name: climber_dynamic_arm_follower, type: can_talon_fx, can_id: 31, local: true} # TODO FIX CAN ID
       - {name: shooter_leader, type: can_talon_fx, can_id: 40, local: true} # TODO Fix CAN id
       - {name: shooter_follower, type: can_talon_fx, can_id: 41, local: true} # TODO Fix CAN id

       - {name: fl_drive, type: can_talon_fx, can_id: 21, local: true}
       - {name: fl_angle, type: can_talon_fx, can_id: 11, local: true}
       - {name: fr_drive, type: can_talon_fx, can_id: 22, local: true}
       - {name: fr_angle, type: can_talon_fx, can_id: 12, local: true}
       - {name: br_drive, type: can_talon_fx, can_id: 24, local: true}
       - {name: br_angle, type: can_talon_fx, can_id: 14, local: true}
       - {name: bl_drive, type: can_talon_fx, can_id: 23, local: true}
       - {name: bl_angle, type: can_talon_fx, can_id: 13, local: true}
       # - {name: pdh, type: pdh}
       # - {name: pcm, type: pcm, pcm_id: 0}

       - {name: robot_code_ready_jetson, local: true, type: ready}
       - {name: robot_code_ready_rio, local: false, type: ready} # Probably not really needed?

         #- {name: babys_first_orchestra, type: orchestra, id: 1}

# Create controllers for each joint
#
# Entry is the name of the controller. It can be anything.
# It will create a namespace with that name under the main
# controller namespace. Subscribed topics for that controller
# will be most often show up under
# <top level controller manager ns>/<controller ns>/topic
# e.g.
# /frcrobot/joint1_talon_controller/command
# /frcrobot/joint2_talon_controller/command
# /frcrobot/talon_states

#Set up controllers for main robot mechanisms
dynamic_arm_solenoid_controller:
  type: position_controllers/JointPositionController
  joint: climber_dynamic_arm_solenoid_joint

static_hook_solenoid_controller:
  type: position_controllers/JointPositionController
  joint: climber_static_hook_solenoid_joint

dynamic_arm_controller:
  type: dynamic_arm_controller/DynamicArmController
  dynamic_arm_joint: ['dynamic_arm_leader', 'dynamic_arm_follower']

  dynamic_arm_zeroing_percent_output: -0.2 # TODO : tune me
  # If there are no negative velocity readings while zeroing
  # for this amount of time, assume the dynamic arm is stuck
  # or has hit bottom and the limit switch is broken.  Stop
  # trying to drive down to prevent killing the motor
  dynamic_arm_zeroing_timeout: 2.0

  # TODO fix these
  dynamic_arm_max_current_iterations: 10
  dynamic_arm_current_threshold: 10.0

  motion_magic_velocity_fast: 1.7
  motion_magic_acceleration_fast: 3.5

  motion_magic_velocity_slow: 0.25
  motion_magic_acceleration_slow: 0.4

  dynamic_arm_leader:
    type: talon_controllers/TalonControllerInterface
    joint: climber_dynamic_arm_leader
    # TODO Actually define PID, this is from 2019
    close_loop_values:
        - {p: 0.275, i: 0.00001, d: 6.25, f: 0.28, i_zone: 0, closed_loop_peak_output: 1.0}
        - {p: 0.25, i: 0.0, d: 0, f: 0.58, i_zone: 4096, closed_loop_peak_output: 1.0}

    sensor_phase: True
    invert_output: False

    feedback_type: IntegratedSensor

    # TODO : bottom limit switch config
    limit_switch_local_reverse_source: "FeedbackConnector"
    limit_switch_local_reverse_normal: "NormallyOpen"

    # TODO Change this for 2022, this is from 2019
    # softlimit_forward_threshold: 1.5 #1.66755
    # softlimit_forward_enable: False

    voltage_compensation_enable: True
    voltage_compensation_saturation: 12

    conversion_factor: 0.00108
    neutral_deadband: 0.001
    neutral_mode: Brake

    dynamic_reconfigure: true
    motion_s_curve_strength: 0

    #status_1_general_period: 10
    #status_2_feedback0_period: 20
    status_3_quadrature_period: 250
    #status_4_aintempvbat_period: 160
    #status_6_misc_period: 0
    #status_7_commstatus_period: 0
    status_8_pulsewidth_period: 250
    status_9_motprofbuffer_period: 250
    #status_10_motionmagic_period: 160
    #status_11_uartgadgeteer_period: 250
    #status_12_feedback1_period: 250
    #status_13_base_pidf0_period: 160
    #status_14_turn_pidf1_period: 250
    status_15_firmwareapistatus_period: 250
    #status_17_brushless_current_period: 50

  dynamic_arm_follower:
    joint: climber_dynamic_arm_follower
    invert_output: True
    status_1_general_period: 250 # default = 10
    status_2_feedback0_period: 250 # Default = 20
    status_3_quadrature_period: 250
    #status_4_aintempvbat_period: 160
    #status_6_misc_period: 0
    #status_7_commstatus_period: 0
    status_8_pulsewidth_period: 250
    status_9_motprofbuffer_period: 250
    status_10_motionmagic_period: 250
    #status_11_uartgadgeteer_period: 250
    #status_12_feedback1_period: 250
    #status_13_base_pidf0_period: 160
    #status_14_turn_pidf1_period: 250
    status_15_firmwareapistatus_period: 250
    #status_17_brushless_current_period: 50
    neutral_mode: Brake
    dynamic_reconfigure: False

shooter_controller:
  joint: shooter_leader
  type: talon_controllers/TalonVelocityCloseLoopController
  feedback_type: IntegratedSensor
  # TODO FIX ALL BELOW VALUES (these are from 2020)
  close_loop_values:
      - {p: 0.00, i: 0.000, d: 0.0, f: 0, i_zone: 0}
  invert_output: true
  sensor_phase: false
  peak_output_forward: 1.0
  peak_output_reverse: 0.0
  nominal_output_forward: 0.0
  nominal_output_reverse: 0.0
  voltage_compensation_enable: true
  dynamic_reconfigure: True
  neutral_mode: Coast
  #status_1_general_period: 10
  #status_2_feedback0_period: 20
  status_3_quadrature_period: 250
  #status_4_aintempvbat_period: 160
  #status_6_misc_period: 0
  #status_7_commstatus_period: 0
  status_8_pulsewidth_period: 250
  status_9_motprofbuffer_period: 250
  status_10_motionmagic_period: 250
  #status_11_uartgadgeteer_period: 250
  #status_12_feedback1_period: 250
  #status_13_base_pidf0_period: 160
  #status_14_turn_pidf1_period: 250
  status_15_firmwareapistatus_period: 250
  #status_17_brushless_current_period: 50

shooter_follower_controller:
  type: talon_controllers/TalonFollowerController
  joint: shooter_follower
  feedback_type: IntegratedSensor
  invert_output: False
  follow_joint: shooter_leader
  status_1_general_period: 250 # Default = 10
  status_2_feedback0_period: 250 # Default = 20
  status_3_quadrature_period: 250
  #status_4_aintempvbat_period: 160
  #status_6_misc_period: 0
  #status_7_commstatus_period: 0
  status_8_pulsewidth_period: 250
  status_9_motprofbuffer_period: 250
  status_10_motionmagic_period: 250
  #status_11_uartgadgeteer_period: 250
  #status_12_feedback1_period: 250
  status_13_base_pidf0_period: 250
  #status_14_turn_pidf1_period: 250
  status_15_firmwareapistatus_period: 250
  #status_17_brushless_current_period: 50

# This one creates the /talon_states topic necessary in ROS
# It doesn't actually control anything, just takes the internal
# encoder state used by the hw manager and publishes it as
# a ROS topic.  This is generic ROS stuff, so we'll have
# to figure out what to map e.g. effort to in the Talon world
talon_state_controller_jetson:
   type:         talon_state_controller/TalonStateController
   publish_rate: 100
talon_config_controller:
   type:         talon_config_controller/TalonConfigController
   publish_rate: 5

# Similar to above, but this one prints non-Talon state
# (stuff that fits into the more standard ROS position/
# speed/effort paradigm)
joint_state_controller_jetson:
   type:         joint_state_controller/JointStateController
   publish_rate: 100

# Used to listen for remote joint states published from the given topic
# (in this case the Rio) and copy them to internal copies of
# joint data
joint_state_listener_controller:
    type:      state_listener_controller/JointStateListenerController
    topic:     /frcrobot_rio/joint_states

pdh_state_controller:
   type:         pdh_state_controller/PDHStateController
   publish_rate: 20
   things_plugged_in_pdh_channel:
        ["", #id 1
         "", #id 2
         "", #id 3
         "", #id 4
         "", #id 5
         "", #id 6
         "", #id 7
         "", #id 8
         "", #id 9
         "", #id 10
         "", #id 11
         "", #id 12
         "", #id 13
         "", #id 14
         "", #id 15
         "", #id 16
         "", #id 17
         "", #id 18
         "", #id 19
         "", #id 20
         "", #id 21
         "", #id 22
         "", #id 23
         ""  #id 24
        ]

pcm_state_controller:
   type:         pcm_state_controller/PCMStateController
   publish_rate: 20

match_state_listener_controller:
    type:      state_listener_controller/MatchStateListenerController
    topic:     /frcrobot_rio/match_data

#orchestra_controller:
    #type:      orchestra_controller/OrchestraController

